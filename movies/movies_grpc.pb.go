// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: movies.proto

package movies

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MovieService_CreateBox_FullMethodName     = "/MovieService/CreateBox"
	MovieService_AddToBox_FullMethodName      = "/MovieService/AddToBox"
	MovieService_RemoveFromBox_FullMethodName = "/MovieService/RemoveFromBox"
	MovieService_GetBox_FullMethodName        = "/MovieService/GetBox"
	MovieService_SetBox_FullMethodName        = "/MovieService/SetBox"
	MovieService_UserOfBox_FullMethodName     = "/MovieService/UserOfBox"
	MovieService_GetMovie_FullMethodName      = "/MovieService/GetMovie"
)

// MovieServiceClient is the client API for MovieService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MovieServiceClient interface {
	CreateBox(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*MovieBoxIdentifier, error)
	AddToBox(ctx context.Context, in *UserBoxRequest, opts ...grpc.CallOption) (*ActionResponse, error)
	RemoveFromBox(ctx context.Context, in *UserBoxRequest, opts ...grpc.CallOption) (*ActionResponse, error)
	GetBox(ctx context.Context, in *MovieBoxIdentifier, opts ...grpc.CallOption) (*MovieBox, error)
	SetBox(ctx context.Context, in *MovieBox, opts ...grpc.CallOption) (*ActionResponse, error)
	UserOfBox(ctx context.Context, in *MovieBoxIdentifier, opts ...grpc.CallOption) (*UserGroup, error)
	GetMovie(ctx context.Context, in *MovieIdentifier, opts ...grpc.CallOption) (*Movie, error)
}

type movieServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMovieServiceClient(cc grpc.ClientConnInterface) MovieServiceClient {
	return &movieServiceClient{cc}
}

func (c *movieServiceClient) CreateBox(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*MovieBoxIdentifier, error) {
	out := new(MovieBoxIdentifier)
	err := c.cc.Invoke(ctx, MovieService_CreateBox_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServiceClient) AddToBox(ctx context.Context, in *UserBoxRequest, opts ...grpc.CallOption) (*ActionResponse, error) {
	out := new(ActionResponse)
	err := c.cc.Invoke(ctx, MovieService_AddToBox_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServiceClient) RemoveFromBox(ctx context.Context, in *UserBoxRequest, opts ...grpc.CallOption) (*ActionResponse, error) {
	out := new(ActionResponse)
	err := c.cc.Invoke(ctx, MovieService_RemoveFromBox_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServiceClient) GetBox(ctx context.Context, in *MovieBoxIdentifier, opts ...grpc.CallOption) (*MovieBox, error) {
	out := new(MovieBox)
	err := c.cc.Invoke(ctx, MovieService_GetBox_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServiceClient) SetBox(ctx context.Context, in *MovieBox, opts ...grpc.CallOption) (*ActionResponse, error) {
	out := new(ActionResponse)
	err := c.cc.Invoke(ctx, MovieService_SetBox_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServiceClient) UserOfBox(ctx context.Context, in *MovieBoxIdentifier, opts ...grpc.CallOption) (*UserGroup, error) {
	out := new(UserGroup)
	err := c.cc.Invoke(ctx, MovieService_UserOfBox_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServiceClient) GetMovie(ctx context.Context, in *MovieIdentifier, opts ...grpc.CallOption) (*Movie, error) {
	out := new(Movie)
	err := c.cc.Invoke(ctx, MovieService_GetMovie_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MovieServiceServer is the server API for MovieService service.
// All implementations must embed UnimplementedMovieServiceServer
// for forward compatibility
type MovieServiceServer interface {
	CreateBox(context.Context, *CreateRequest) (*MovieBoxIdentifier, error)
	AddToBox(context.Context, *UserBoxRequest) (*ActionResponse, error)
	RemoveFromBox(context.Context, *UserBoxRequest) (*ActionResponse, error)
	GetBox(context.Context, *MovieBoxIdentifier) (*MovieBox, error)
	SetBox(context.Context, *MovieBox) (*ActionResponse, error)
	UserOfBox(context.Context, *MovieBoxIdentifier) (*UserGroup, error)
	GetMovie(context.Context, *MovieIdentifier) (*Movie, error)
	mustEmbedUnimplementedMovieServiceServer()
}

// UnimplementedMovieServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMovieServiceServer struct {
}

func (UnimplementedMovieServiceServer) CreateBox(context.Context, *CreateRequest) (*MovieBoxIdentifier, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBox not implemented")
}
func (UnimplementedMovieServiceServer) AddToBox(context.Context, *UserBoxRequest) (*ActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToBox not implemented")
}
func (UnimplementedMovieServiceServer) RemoveFromBox(context.Context, *UserBoxRequest) (*ActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFromBox not implemented")
}
func (UnimplementedMovieServiceServer) GetBox(context.Context, *MovieBoxIdentifier) (*MovieBox, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBox not implemented")
}
func (UnimplementedMovieServiceServer) SetBox(context.Context, *MovieBox) (*ActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetBox not implemented")
}
func (UnimplementedMovieServiceServer) UserOfBox(context.Context, *MovieBoxIdentifier) (*UserGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserOfBox not implemented")
}
func (UnimplementedMovieServiceServer) GetMovie(context.Context, *MovieIdentifier) (*Movie, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMovie not implemented")
}
func (UnimplementedMovieServiceServer) mustEmbedUnimplementedMovieServiceServer() {}

// UnsafeMovieServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MovieServiceServer will
// result in compilation errors.
type UnsafeMovieServiceServer interface {
	mustEmbedUnimplementedMovieServiceServer()
}

func RegisterMovieServiceServer(s grpc.ServiceRegistrar, srv MovieServiceServer) {
	s.RegisterService(&MovieService_ServiceDesc, srv)
}

func _MovieService_CreateBox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).CreateBox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MovieService_CreateBox_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).CreateBox(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieService_AddToBox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserBoxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).AddToBox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MovieService_AddToBox_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).AddToBox(ctx, req.(*UserBoxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieService_RemoveFromBox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserBoxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).RemoveFromBox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MovieService_RemoveFromBox_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).RemoveFromBox(ctx, req.(*UserBoxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieService_GetBox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MovieBoxIdentifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).GetBox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MovieService_GetBox_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).GetBox(ctx, req.(*MovieBoxIdentifier))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieService_SetBox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MovieBox)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).SetBox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MovieService_SetBox_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).SetBox(ctx, req.(*MovieBox))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieService_UserOfBox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MovieBoxIdentifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).UserOfBox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MovieService_UserOfBox_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).UserOfBox(ctx, req.(*MovieBoxIdentifier))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieService_GetMovie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MovieIdentifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).GetMovie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MovieService_GetMovie_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).GetMovie(ctx, req.(*MovieIdentifier))
	}
	return interceptor(ctx, in, info, handler)
}

// MovieService_ServiceDesc is the grpc.ServiceDesc for MovieService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MovieService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "MovieService",
	HandlerType: (*MovieServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBox",
			Handler:    _MovieService_CreateBox_Handler,
		},
		{
			MethodName: "AddToBox",
			Handler:    _MovieService_AddToBox_Handler,
		},
		{
			MethodName: "RemoveFromBox",
			Handler:    _MovieService_RemoveFromBox_Handler,
		},
		{
			MethodName: "GetBox",
			Handler:    _MovieService_GetBox_Handler,
		},
		{
			MethodName: "SetBox",
			Handler:    _MovieService_SetBox_Handler,
		},
		{
			MethodName: "UserOfBox",
			Handler:    _MovieService_UserOfBox_Handler,
		},
		{
			MethodName: "GetMovie",
			Handler:    _MovieService_GetMovie_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "movies.proto",
}
